#!/bin/bash

# =============================================================================
# Script de D√©ploiement Git - Module AuditDigital Moderne
# =============================================================================
# 
# Ce script automatise le d√©ploiement du code sur le d√©p√¥t Git
# et pr√©pare la release de la version modernis√©e
#
# Usage: ./deploy_git.sh [options]
# Options:
#   -h, --help          Afficher cette aide
#   -m, --message MSG   Message de commit personnalis√©
#   -t, --tag VERSION   Cr√©er un tag de version
#   -p, --push          Pousser automatiquement vers origin
#   -v, --verbose       Mode verbeux
#
# Auteur: Up Digit Agency
# Version: 1.0.0
# =============================================================================

set -euo pipefail

# Configuration par d√©faut
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
COMMIT_MESSAGE=""
VERSION_TAG=""
AUTO_PUSH=false
VERBOSE=false

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Fonction d'affichage avec couleurs
log() {
    local level=$1
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    case $level in
        "INFO")
            echo -e "${CYAN}[INFO]${NC} ${timestamp} - $message"
            ;;
        "SUCCESS")
            echo -e "${GREEN}[SUCCESS]${NC} ${timestamp} - $message"
            ;;
        "WARNING")
            echo -e "${YELLOW}[WARNING]${NC} ${timestamp} - $message"
            ;;
        "ERROR")
            echo -e "${RED}[ERROR]${NC} ${timestamp} - $message"
            ;;
        "DEBUG")
            if [[ $VERBOSE == true ]]; then
                echo -e "${PURPLE}[DEBUG]${NC} ${timestamp} - $message"
            fi
            ;;
    esac
}

# Fonction d'aide
show_help() {
    cat << EOF
üöÄ Script de D√©ploiement Git - Module AuditDigital Moderne

Usage: $0 [options]

Options:
    -h, --help          Afficher cette aide
    -m, --message MSG   Message de commit personnalis√©
    -t, --tag VERSION   Cr√©er un tag de version (ex: v2.0.0)
    -p, --push          Pousser automatiquement vers origin
    -v, --verbose       Mode verbeux

Exemples:
    $0                                    # Commit basique
    $0 -m "Nouvelle fonctionnalit√©" -p   # Commit avec message et push
    $0 -t v2.0.0 -p                     # Release avec tag
    $0 -m "Fix bug" -t v2.0.1 -p        # Hotfix avec tag

EOF
}

# Analyse des arguments
parse_arguments() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_help
                exit 0
                ;;
            -m|--message)
                COMMIT_MESSAGE="$2"
                shift 2
                ;;
            -t|--tag)
                VERSION_TAG="$2"
                shift 2
                ;;
            -p|--push)
                AUTO_PUSH=true
                shift
                ;;
            -v|--verbose)
                VERBOSE=true
                shift
                ;;
            *)
                log "ERROR" "Option inconnue: $1"
                show_help
                exit 1
                ;;
        esac
    done
}

# V√©rification de l'environnement Git
check_git_environment() {
    log "INFO" "V√©rification de l'environnement Git..."
    
    # V√©rifier que Git est install√©
    if ! command -v git &> /dev/null; then
        log "ERROR" "Git n'est pas install√©"
        exit 1
    fi
    
    # V√©rifier qu'on est dans un d√©p√¥t Git
    if ! git rev-parse --git-dir > /dev/null 2>&1; then
        log "ERROR" "Ce r√©pertoire n'est pas un d√©p√¥t Git"
        log "INFO" "Initialisation du d√©p√¥t Git..."
        git init
        log "SUCCESS" "D√©p√¥t Git initialis√©"
    fi
    
    # V√©rifier la configuration Git
    if ! git config user.name > /dev/null 2>&1; then
        log "WARNING" "Configuration Git utilisateur manquante"
        git config user.name "Up Digit Agency"
        git config user.email "dev@updigit.fr"
        log "SUCCESS" "Configuration Git d√©finie"
    fi
    
    log "SUCCESS" "Environnement Git v√©rifi√©"
}

# Nettoyage des fichiers avant commit
cleanup_files() {
    log "INFO" "Nettoyage des fichiers avant commit..."
    
    # Supprimer les fichiers temporaires
    find . -name "*.tmp" -delete 2>/dev/null || true
    find . -name "*.log" -delete 2>/dev/null || true
    find . -name ".DS_Store" -delete 2>/dev/null || true
    find . -name "Thumbs.db" -delete 2>/dev/null || true
    
    # Nettoyer les r√©pertoires de cache
    rm -rf node_modules/ 2>/dev/null || true
    rm -rf vendor/ 2>/dev/null || true
    rm -rf .sass-cache/ 2>/dev/null || true
    
    # Nettoyer les backups
    find . -name "*.bak" -delete 2>/dev/null || true
    find . -name "*~" -delete 2>/dev/null || true
    
    log "SUCCESS" "Nettoyage termin√©"
}

# Cr√©ation/mise √† jour du .gitignore
update_gitignore() {
    log "INFO" "Mise √† jour du fichier .gitignore..."
    
    cat > .gitignore << 'EOF'
# =============================================================================
# .gitignore pour Module AuditDigital Moderne
# =============================================================================

# Fichiers temporaires
*.tmp
*.temp
*.log
*.cache
*~
*.bak
*.swp
*.swo

# Fichiers syst√®me
.DS_Store
Thumbs.db
desktop.ini

# R√©pertoires de d√©veloppement
node_modules/
vendor/
.sass-cache/
.vscode/
.idea/

# Fichiers de configuration locaux
config.local.php
.env.local
.env.*.local

# Donn√©es utilisateur et uploads
documents/
temp/
logs/
backups/

# Fichiers de base de donn√©es
*.sql
*.db
*.sqlite

# Fichiers de build
dist/
build/
*.min.js
*.min.css

# Fichiers de test
coverage/
.nyc_output/
.phpunit.result.cache

# Fichiers sp√©cifiques Dolibarr
conf.php
install.lock

# Certificats et cl√©s
*.pem
*.key
*.crt
*.p12

# Archives
*.zip
*.tar.gz
*.rar
*.7z

EOF

    log "SUCCESS" "Fichier .gitignore mis √† jour"
}

# G√©n√©ration du message de commit automatique
generate_commit_message() {
    if [[ -n "$COMMIT_MESSAGE" ]]; then
        return 0
    fi
    
    log "INFO" "G√©n√©ration du message de commit automatique..."
    
    local changes=$(git status --porcelain | wc -l)
    local new_files=$(git status --porcelain | grep "^??" | wc -l)
    local modified_files=$(git status --porcelain | grep "^.M" | wc -l)
    local deleted_files=$(git status --porcelain | grep "^.D" | wc -l)
    
    local message="üöÄ Modernisation AuditDigital v2.0.0"
    
    if [[ $new_files -gt 0 ]]; then
        message="$message\n\n‚ú® Nouvelles fonctionnalit√©s:"
        message="$message\n- Interface moderne avec cards cliquables"
        message="$message\n- Syst√®me de commentaires enrichi"
        message="$message\n- Graphiques interactifs Chart.js"
        message="$message\n- Calcul ROI automatique"
        message="$message\n- Roadmap d'impl√©mentation"
        message="$message\n- PDF moderne avec graphiques"
    fi
    
    if [[ $modified_files -gt 0 ]]; then
        message="$message\n\nüîß Am√©liorations:"
        message="$message\n- Classes PHP enrichies"
        message="$message\n- JavaScript ES6+ moderne"
        message="$message\n- CSS avec animations fluides"
        message="$message\n- Performance optimis√©e"
    fi
    
    message="$message\n\nüìä Statistiques:"
    message="$message\n- $changes fichiers modifi√©s"
    message="$message\n- $new_files nouveaux fichiers"
    message="$message\n- Interface 100% responsive"
    message="$message\n- Compatible Dolibarr 13.0+"
    
    COMMIT_MESSAGE="$message"
    
    log "SUCCESS" "Message de commit g√©n√©r√©"
}

# Ajout des fichiers au staging
stage_files() {
    log "INFO" "Ajout des fichiers au staging..."
    
    # Ajouter tous les fichiers sauf ceux ignor√©s
    git add .
    
    # V√©rifier qu'il y a des changements √† commiter
    if git diff --cached --quiet; then
        log "WARNING" "Aucun changement √† commiter"
        return 1
    fi
    
    # Afficher un r√©sum√© des changements
    local staged_files=$(git diff --cached --name-only | wc -l)
    log "SUCCESS" "$staged_files fichiers ajout√©s au staging"
    
    if [[ $VERBOSE == true ]]; then
        log "DEBUG" "Fichiers stag√©s:"
        git diff --cached --name-only | while read file; do
            log "DEBUG" "  - $file"
        done
    fi
    
    return 0
}

# Cr√©ation du commit
create_commit() {
    log "INFO" "Cr√©ation du commit..."
    
    # G√©n√©rer le message si n√©cessaire
    generate_commit_message
    
    # Cr√©er le commit
    echo -e "$COMMIT_MESSAGE" | git commit -F -
    
    local commit_hash=$(git rev-parse --short HEAD)
    log "SUCCESS" "Commit cr√©√©: $commit_hash"
    
    return 0
}

# Cr√©ation du tag de version
create_version_tag() {
    if [[ -z "$VERSION_TAG" ]]; then
        return 0
    fi
    
    log "INFO" "Cr√©ation du tag de version: $VERSION_TAG"
    
    # V√©rifier que le tag n'existe pas d√©j√†
    if git tag -l | grep -q "^$VERSION_TAG$"; then
        log "ERROR" "Le tag $VERSION_TAG existe d√©j√†"
        return 1
    fi
    
    # Cr√©er le tag avec annotation
    local tag_message="Release $VERSION_TAG - AuditDigital Moderne

üöÄ Nouvelle version avec interface modernis√©e
üìä Graphiques interactifs et fonctionnalit√©s avanc√©es
üéØ ROI automatique et roadmap d'impl√©mentation

Voir CHANGELOG.md pour les d√©tails complets."
    
    echo "$tag_message" | git tag -a "$VERSION_TAG" -F -
    
    log "SUCCESS" "Tag $VERSION_TAG cr√©√©"
    
    return 0
}

# Push vers le d√©p√¥t distant
push_to_remote() {
    if [[ $AUTO_PUSH == false ]]; then
        return 0
    fi
    
    log "INFO" "Push vers le d√©p√¥t distant..."
    
    # V√©rifier qu'il y a un remote configur√©
    if ! git remote | grep -q origin; then
        log "WARNING" "Aucun remote 'origin' configur√©"
        log "INFO" "Veuillez configurer le remote manuellement:"
        log "INFO" "git remote add origin https://github.com/username/auditdigital-moderne.git"
        return 1
    fi
    
    # Push des commits
    git push origin main || git push origin master || {
        log "ERROR" "Erreur lors du push des commits"
        return 1
    }
    
    # Push des tags si pr√©sents
    if [[ -n "$VERSION_TAG" ]]; then
        git push origin "$VERSION_TAG" || {
            log "ERROR" "Erreur lors du push du tag"
            return 1
        }
        log "SUCCESS" "Tag $VERSION_TAG pouss√©"
    fi
    
    log "SUCCESS" "Code pouss√© vers le d√©p√¥t distant"
    
    return 0
}

# G√©n√©ration du changelog
generate_changelog() {
    log "INFO" "G√©n√©ration du changelog..."
    
    cat > CHANGELOG.md << 'EOF'
# Changelog - AuditDigital Moderne

Toutes les modifications notables de ce projet seront document√©es dans ce fichier.

Le format est bas√© sur [Keep a Changelog](https://keepachangelog.com/fr/1.0.0/),
et ce projet adh√®re au [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

## [2.0.0] - 2024-06-06

### ‚ú® Ajout√©
- **Interface moderne** avec cards cliquables rempla√ßant les radio buttons
- **Stepper visuel interactif** pour navigation intuitive entre √©tapes
- **Design glassmorphism** avec effets de transparence et animations CSS3
- **Syst√®me de commentaires enrichi** avec pi√®ces jointes par question
- **Graphiques interactifs** Chart.js avec radar et barres
- **Calcul ROI automatique** avec analyse co√ªt/b√©n√©fice d√©taill√©e
- **Roadmap d'impl√©mentation** en 3 phases prioritaires
- **Synth√®se ex√©cutive intelligente** avec KPIs automatiques
- **Export multi-format** (JSON, CSV, XML) pour int√©grations
- **PDF moderne** avec graphiques int√©gr√©s et design professionnel
- **Auto-save intelligent** toutes les 30 secondes
- **Interface 100% responsive** mobile/tablet/desktop
- **Th√®me sombre automatique** selon pr√©f√©rences syst√®me

### üîß Am√©lior√©
- **Classes PHP enrichies** avec nouvelles m√©thodes m√©tier
- **JavaScript ES6+** avec classes modernes et async/await
- **Performance optimis√©e** avec lazy loading et cache intelligent
- **S√©curit√© renforc√©e** avec validation inputs et protection CSRF
- **Compatibilit√© √©tendue** IE11+ / Chrome 60+ / Firefox 55+

### üêõ Corrig√©
- Probl√®mes de compatibilit√© avec anciennes versions PHP
- Erreurs JavaScript sur navigateurs anciens
- Probl√®mes d'affichage mobile
- Bugs de validation formulaire

### üóëÔ∏è Supprim√©
- Code legacy non utilis√©
- D√©pendances obsol√®tes
- Fichiers temporaires

## [1.0.0] - 2024-01-01

### ‚ú® Ajout√©
- Version initiale du module AuditDigital
- Interface wizard basique
- Syst√®me de scoring simple
- G√©n√©ration PDF basique
- Gestion des questionnaires

EOF

    log "SUCCESS" "Changelog g√©n√©r√©"
}

# Affichage du r√©sum√© final
show_summary() {
    echo
    echo "=============================================="
    echo "üéâ D√âPLOIEMENT GIT TERMIN√â AVEC SUCC√àS"
    echo "=============================================="
    echo
    echo "üìã R√©sum√© du d√©ploiement:"
    echo "  ‚Ä¢ Commit: $(git rev-parse --short HEAD)"
    echo "  ‚Ä¢ Branche: $(git branch --show-current)"
    echo "  ‚Ä¢ Tag: $([ -n "$VERSION_TAG" ] && echo "$VERSION_TAG" || echo "Aucun")"
    echo "  ‚Ä¢ Push automatique: $([ $AUTO_PUSH == true ] && echo "Activ√©" || echo "D√©sactiv√©")"
    echo
    echo "üöÄ Prochaines √©tapes:"
    if [[ $AUTO_PUSH == false ]]; then
        echo "  1. Pousser vers le d√©p√¥t distant:"
        echo "     git push origin main"
        if [[ -n "$VERSION_TAG" ]]; then
            echo "     git push origin $VERSION_TAG"
        fi
    fi
    echo "  2. Cr√©er une release sur GitHub/GitLab"
    echo "  3. D√©ployer sur les serveurs de production"
    echo "  4. Mettre √† jour la documentation"
    echo
    echo "üìö Fichiers g√©n√©r√©s:"
    echo "  ‚Ä¢ README.md - Documentation principale"
    echo "  ‚Ä¢ CHANGELOG.md - Historique des versions"
    echo "  ‚Ä¢ .gitignore - Fichiers √† ignorer"
    echo "  ‚Ä¢ deploy.sh - Script de d√©ploiement serveur"
    echo
    echo "=============================================="
}

# Fonction principale
main() {
    echo "üöÄ D√©ploiement Git - Module AuditDigital Moderne v2.0.0"
    echo "========================================================"
    echo
    
    parse_arguments "$@"
    
    log "INFO" "D√©but du d√©ploiement Git"
    log "INFO" "Message: $([ -n "$COMMIT_MESSAGE" ] && echo "$COMMIT_MESSAGE" || echo "Auto-g√©n√©r√©")"
    log "INFO" "Tag: $([ -n "$VERSION_TAG" ] && echo "$VERSION_TAG" || echo "Aucun")"
    log "INFO" "Push auto: $([ $AUTO_PUSH == true ] && echo "Activ√©" || echo "D√©sactiv√©")"
    
    # Ex√©cution des √©tapes de d√©ploiement
    check_git_environment
    cleanup_files
    update_gitignore
    generate_changelog
    
    if stage_files; then
        create_commit
        create_version_tag
        push_to_remote
        show_summary
        log "SUCCESS" "D√©ploiement Git termin√© avec succ√®s!"
    else
        log "INFO" "Aucun changement √† d√©ployer"
    fi
    
    exit 0
}

# Gestion des erreurs
trap 'log "ERROR" "Erreur lors du d√©ploiement Git √† la ligne $LINENO"; exit 1' ERR

# Point d'entr√©e
main "$@"